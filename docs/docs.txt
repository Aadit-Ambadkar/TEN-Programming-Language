████████╗███████╗███╗   ██╗    ██████╗  ██████╗  ██████╗███████╗
╚══██╔══╝██╔════╝████╗  ██║    ██╔══██╗██╔═══██╗██╔════╝██╔════╝
   ██║   █████╗  ██╔██╗ ██║    ██║  ██║██║   ██║██║     ███████╗
   ██║   ██╔══╝  ██║╚██╗██║    ██║  ██║██║   ██║██║     ╚════██║
   ██║   ███████╗██║ ╚████║    ██████╔╝╚██████╔╝╚██████╗███████║
   ╚═╝   ╚══════╝╚═╝  ╚═══╝    ╚═════╝  ╚═════╝  ╚═════╝╚══════╝
                                                                
By Aadit Ambadkar
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________

███████╗██╗   ██╗███╗   ██╗████████╗ █████╗ ██╗  ██╗
██╔════╝╚██╗ ██╔╝████╗  ██║╚══██╔══╝██╔══██╗╚██╗██╔╝
███████╗ ╚████╔╝ ██╔██╗ ██║   ██║   ███████║ ╚███╔╝ 
╚════██║  ╚██╔╝  ██║╚██╗██║   ██║   ██╔══██║ ██╔██╗ 
███████║   ██║   ██║ ╚████║   ██║   ██║  ██║██╔╝ ██╗
╚══════╝   ╚═╝   ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝
                                                    
{element init,condition,iteration, body} for loop
[condition#] while loop
| type prefix
i int
s string
c char
$ end type prefix, begin variable naming. Following string must only contain alphabetic characters, ie abcdefghijklmnopqrstuvwxyz and no other special characters
^ get variable
~ 1 if positive, 0 if 0, -1 if negative
: assignment
[ array index
< shift index down 1 in stack NOT GREATER THAN
> shift index up 1 in stack NOT LESS THAN
_ get top of the stack without pop
! get top of the stack with pop
` true value
+-*/ standard operations
. not
= equal to test
@ comment - anything after this will be ignored until the end comment (%) symbol
% end comment - ends any and all comments
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________

███████╗██╗  ██╗ █████╗ ███╗   ███╗██████╗ ██╗     ███████╗███████╗
██╔════╝╚██╗██╔╝██╔══██╗████╗ ████║██╔══██╗██║     ██╔════╝██╔════╝
█████╗   ╚███╔╝ ███████║██╔████╔██║██████╔╝██║     █████╗  ███████╗
██╔══╝   ██╔██╗ ██╔══██║██║╚██╔╝██║██╔═══╝ ██║     ██╔══╝  ╚════██║
███████╗██╔╝ ██╗██║  ██║██║ ╚═╝ ██║██║     ███████╗███████╗███████║
╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚══════╝
                                                                   
0|i$a:
{,a^3=.,1a+a:}
	a^;
{0|i$i:,1i^a^-~=,1i+i:}
	i^i^*;

stdout: "0\n1\n2\n0\n1\n4"

19+|i$ten: @ Sample Comment %
55+_;ten^+_;3+i: 

Stack: [1] [1,9] [10] [] [5] [5,5] [10] [
stdout: "10\n20\n"
Vars: {'ten': 10, 'i': 23}


5a^[
Stack: [5] [5,'a'] [5, "this is a random string"] ['i']

