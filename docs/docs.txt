                                                                                                                                    
8888888 8888888888 8 8888888888   b.             8           8 888888888o.          ,o888888o.         ,o888888o.       d888888o.   
      8 8888       8 8888         888o.          8           8 8888    `^888.    . 8888     `88.      8888     `88.   .`8888:' `88. 
      8 8888       8 8888         Y88888o.       8           8 8888        `88. ,8 8888       `8b  ,8 8888       `8.  8.`8888.   Y8 
      8 8888       8 8888         .`Y888888o.    8           8 8888         `88 88 8888        `8b 88 8888            `8.`8888.     
      8 8888       8 888888888888 8o. `Y888888o. 8           8 8888          88 88 8888         88 88 8888             `8.`8888.    
      8 8888       8 8888         8`Y8o. `Y88888o8           8 8888          88 88 8888         88 88 8888              `8.`8888.   
      8 8888       8 8888         8   `Y8o. `Y8888           8 8888         ,88 88 8888        ,8P 88 8888               `8.`8888.  
      8 8888       8 8888         8      `Y8o. `Y8           8 8888        ,88' `8 8888       ,8P  `8 8888       .8' 8b   `8.`8888. 
      8 8888       8 8888         8         `Y8o.`           8 8888    ,o88P'    ` 8888     ,88'      8888     ,88'  `8b.  ;8.`8888 
      8 8888       8 888888888888 8            `Yo           8 888888888P'          `8888888P'         `8888888P'     `Y8888P ,88P'
                                                                
TEN Programming Language is created by Aadit Ambadkar
TEN Programming Language is licensed under the MIT License
TEN Programming Language is a free and open-source programming language
Please see CONTRIBUTING.md for information on how to contribute to TEN
I am not responsible for any mental, physical, metaphysical, interpersonal, intrapersonal, or other damages caused by using this language
_________________________________________________________________________________________________________________________________________________________________________________

  █████████                         █████                         
 ███░░░░░███                       ░░███                          
░███    ░░░  █████ ████ ████████   ███████    ██████   █████ █████
░░█████████ ░░███ ░███ ░░███░░███ ░░░███░    ░░░░░███ ░░███ ░░███ 
 ░░░░░░░░███ ░███ ░███  ░███ ░███   ░███      ███████  ░░░█████░  
 ███    ░███ ░███ ░███  ░███ ░███   ░███ ███ ███░░███   ███░░░███ 
░░█████████  ░░███████  ████ █████  ░░█████ ░░████████ █████ █████
 ░░░░░░░░░    ░░░░░███ ░░░░ ░░░░░    ░░░░░   ░░░░░░░░ ░░░░░ ░░░░░ 
              ███ ░███                                            
             ░░██████                                             
              ░░░░░░                           
                                                    
   __   ____  ____  ___  ____
  / /  / __ \/ __ \/ _ \/ __/
 / /__/ /_/ / /_/ / ___/\ \  
/____/\____/\____/_/  /___/  

{element init,condition,iteration, body} for loop
<body> if statement (executes if top of stack is True)
| type prefix
i int (converts top of stack value to int, if not already int. If not possible, defaults to 0)
s string (converts top of stack value to string, if not already string)
c char (converts top of stack value to character. If not possible, defaults to '\x00' character)
$ end type prefix, begin variable naming.

See variables.ten for specifics on variables

I converts top of stack to int, if possible. If not, does nothing
S converts top of stack to string, if possible. If not, does nothing
C converts top of stack to character, if possible. If not, does nothing

Generally, the above are used for changing types without variable declaration. However, there is no functional difference between I or i, S or s, or C or c.

   _____________  _______ __   ____  ___  _______  ___ ______________  _  ______
  / __/_  __/ _ |/ ___/ //_/  / __ \/ _ \/ __/ _ \/ _ /_  __/  _/ __ \/ |/ / __/
 _\ \  / / / __ / /__/ ,<    / /_/ / ___/ _// , _/ __ |/ / _/ // /_/ /    /\ \  
/___/ /_/ /_/ |_\___/_/|_|   \____/_/  /___/_/|_/_/ |_/_/ /___/\____/_/|_/___/  
                                                                               
+-*/ standard mathematical operations on the first two elements of the stack (deletes the elements)
^ get variable value and add to top of stack
~ 1 if top of stack is positive, 0 if 0, -1 if negative
: variable assignment
[ gets an integer value at the top of the stack - index. gets an array at the second from the top of the stack - array. Removes both the index and the array from the stack. Adds array[index] to the top of the stack.
! remove current value from stack
? clears all values from stack
& duplicates top of stack

See stackoperations.ten for specifics on stack operations

 _________  __  __________ __   ___   _  _____     _______   __   ________
/_  __/ _ \/ / / /_  __/ // /  / _ | / |/ / _ \   / __/ _ | / /  / __/ __/
 / / / , _/ /_/ / / / / _  /  / __ |/    / // /  / _// __ |/ /___\ \/ _/  
/_/ /_/|_|\____/ /_/ /_//_/  /_/ |_/_/|_/____/  /_/ /_/ |_/____/___/___/  

` true value
] null value
( and
) or
. not
= equals
<body> if statement (executes if top of stack is True)

See if.ten for specifics on if statements

   ________ 
  /  _/ __ \
 _/ // /_/ /
/___/\____/ 
# standard input
; standard output

See input.ten for specifics on input and output
 
   __  ________________   ____  ___  _______  ___ ______________  _  ______
  /  |/  /  _/ __/ ___/  / __ \/ _ \/ __/ _ \/ _ /_  __/  _/ __ \/ |/ / __/
 / /|_/ // /_\ \/ /__   / /_/ / ___/ _// , _/ __ |/ / _/ // /_/ /    /\ \  
/_/  /_/___/___/\___/   \____/_/  /___/_/|_/_/ |_/_/ /___/\____/_/|_/___/  
                                                                                                                                                               
_ ends program
" begin string (used to begin a string, useful if string contains whitespace, which is normally stripped)
' end string (any non special characters are automatically parsed as string, unless they are number)
@ comment - anything after this will be ignored until the end comment (%) symbol
% end comment - ends any and all comments

See comments.ten for specifics on comments
_________________________________________________________________________________________________________________________________________________________________________________

 ██████████                                                 ████                  
░░███░░░░░█                                                ░░███                  
 ░███  █ ░  █████ █████  ██████   █████████████   ████████  ░███   ██████   █████ 
 ░██████   ░░███ ░░███  ░░░░░███ ░░███░░███░░███ ░░███░░███ ░███  ███░░███ ███░░  
 ░███░░█    ░░░█████░    ███████  ░███ ░███ ░███  ░███ ░███ ░███ ░███████ ░░█████ 
 ░███ ░   █  ███░░░███  ███░░███  ░███ ░███ ░███  ░███ ░███ ░███ ░███░░░   ░░░░███
 ██████████ █████ █████░░████████ █████░███ █████ ░███████  █████░░██████  ██████ 
░░░░░░░░░░ ░░░░░ ░░░░░  ░░░░░░░░ ░░░░░ ░░░ ░░░░░  ░███░░░  ░░░░░  ░░░░░░  ░░░░░░  
                                                  ░███                            
                                                  █████                           
                                                 ░░░░░                           

Examples can be found in `/src/examples`
_________________________________________________________________________________________________________________________________________________________________________________

 ██████   █████    ███████    ███████████ ██████████  █████████ 
░░██████ ░░███   ███░░░░░███ ░█░░░███░░░█░░███░░░░░█ ███░░░░░███
 ░███░███ ░███  ███     ░░███░   ░███  ░  ░███  █ ░ ░███    ░░░ 
 ░███░░███░███ ░███      ░███    ░███     ░██████   ░░█████████ 
 ░███ ░░██████ ░███      ░███    ░███     ░███░░█    ░░░░░░░░███
 ░███  ░░█████ ░░███     ███     ░███     ░███ ░   █ ███    ░███
 █████  ░░█████ ░░░███████░      █████    ██████████░░█████████ 
░░░░░    ░░░░░    ░░░░░░░       ░░░░░    ░░░░░░░░░░  ░░░░░░░░░  

* Some of the examples may be outdated, in which case refer to the syntax for proper use.
* Some (read most) errors are not displayed - Good Luck
* Variable names must only contain alphabetic characters, ie abcdefghijklmnopqrstuvwxyz and no other special characters
_________________________________________________________________________________________________________________________________________________________________________________

   █████████     ███████    ██████   ██████ █████ ██████   █████   █████████      █████████     ███████       ███████    ██████   █████
  ███░░░░░███  ███░░░░░███ ░░██████ ██████ ░░███ ░░██████ ░░███   ███░░░░░███    ███░░░░░███  ███░░░░░███   ███░░░░░███ ░░██████ ░░███ 
 ███     ░░░  ███     ░░███ ░███░█████░███  ░███  ░███░███ ░███  ███     ░░░    ░███    ░░░  ███     ░░███ ███     ░░███ ░███░███ ░███ 
░███         ░███      ░███ ░███░░███ ░███  ░███  ░███░░███░███ ░███            ░░█████████ ░███      ░███░███      ░███ ░███░░███░███ 
░███         ░███      ░███ ░███ ░░░  ░███  ░███  ░███ ░░██████ ░███    █████    ░░░░░░░░███░███      ░███░███      ░███ ░███ ░░██████ 
░░███     ███░░███     ███  ░███      ░███  ░███  ░███  ░░█████ ░░███  ░░███     ███    ░███░░███     ███ ░░███     ███  ░███  ░░█████ 
 ░░█████████  ░░░███████░   █████     █████ █████ █████  ░░█████ ░░█████████    ░░█████████  ░░░███████░   ░░░███████░   █████  ░░█████
  ░░░░░░░░░     ░░░░░░░    ░░░░░     ░░░░░ ░░░░░ ░░░░░    ░░░░░   ░░░░░░░░░      ░░░░░░░░░     ░░░░░░░       ░░░░░░░    ░░░░░    ░░░░░ 
                                                                                          
<name,body> function
